void backtrack(int open,int close,string curr, vector<string>&ans)
{
    if(open==0 && close==0)
    {
        ans.push_back(curr);
        return ;
    }
    if(open!=0)
    {
        backtrack(open-1,close,curr+'(',ans);
    }
    if(close>open)
    {
        
        backtrack(open,close-1,curr+')',ans);
    }
    return ;
}
vector<string> Solution::generateParenthesis(int A) {
    
    int open=A;
    int close=A;
    string curr="";
    vector<string>ans;
    backtrack(open,close,curr,ans);
    return ans;
}
