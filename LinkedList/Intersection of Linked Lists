/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode* Solution::getIntersectionNode(ListNode* A, ListNode* B) {
    if(A==NULL || B==NULL) return NULL;
    ListNode* temp1=A;
    ListNode* temp2=B;
    int count1=1,count2=1;
    while(temp1!=NULL)
    {
        count1++;
        temp1=temp1->next;
    }
    while(temp2!=NULL)
    {
        count2++;
        temp2=temp2->next;
    }
    
     temp1=A;
    temp2=B;
    
    if(count1>count2)
    {
        int n=count1-count2;
       
        for(int i=0;i<n;i++)
        {
            temp1=temp1->next;
        }
        
    }
    else if(count2>count1)
    {
        int n=count2-count1;
        
        for(int i=0;i<n;i++)
        {
            temp2=temp2->next;
            
        }
    }
    
    while(temp1!=NULL && temp2!=NULL )
    {
        
        if(temp1==temp2)
        {
         return temp1;   
        }
        temp1=temp1->next;
        temp2=temp2->next;
        

    }
    
    return NULL;
    
    
}
