ListNode* merge(ListNode* l1,ListNode* l2)
{
    if(!l1)return l2;
    if(!l2) return l1;
    
    ListNode* head;
    if(l1->val < l2->val)
    {
        head=l1;
        l1=l1->next;
        
    }
    else{
        head=l2;
        l2=l2->next;
        
    }
    ListNode* temp=head;
    while(l1 && l2)
    {
        if(l1->val < l2->val)
        {
            temp->next=l1;
            l1=l1->next;
        }
        else{
            temp->next=l2;
            l2=l2->next;
            
        }
        temp=temp->next;
    }
    if(l1)
    {
        temp->next=l1;
    }
    if(l2)
    {
        temp->next=l2;
    }
    return head;
}
ListNode* Solution::sortList(ListNode* head) {
    
    if(!head || !head->next) return head;
    
    ListNode* fast=head;
    ListNode* slow=head;
    
    while(fast->next && fast->next->next)
    {
        slow=slow->next;
        fast=fast->next->next;
    }
    fast=slow->next;
    slow->next=NULL;
    
    return merge(sortList(head),sortList(fast));
}
