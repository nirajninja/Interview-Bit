
 class node{
        public:
        int key;
        int val;
        node* prev;
        node* next;
        node(int _key,int _val)
        {
            key=_key;
            val=_val;
            
        }
    };
    node* head=new node(-1,-1);
    node* tail=new node(-1,-1);
    int cap;
    
    unordered_map<int,node*>m;
    
LRUCache::LRUCache(int capacity) {
         m.clear();
        cap=capacity;
        head->next=tail;
        tail->prev=head;
                           
}

void addnode(node* newnode)
    {
        node* temp=head->next;
        
        newnode->next=temp;
        newnode->prev=head;
        head->next=newnode;
        
        temp->prev=newnode;
        
    }
    
    void  deletenode(node* delnode)
    {
        node* delprev=delnode->prev;
        node* delnext=delnode->next;
        delprev->next=delnext;
        delnext->prev=delprev;
    }

int LRUCache::get(int _key) {
    
    if(m.find(_key)!=m.end())
        {
            
            node* resnode=m[_key];
            int res=resnode->val;
            m.erase(_key);
            deletenode(resnode);
            addnode(resnode);
            m[_key]=head->next;
            
            return res;
            
            
        }
        return -1;

}

void LRUCache::set(int _key, int _value) {
     
        if(m.find(_key)!=m.end())
        {
            node* existingnode=m[_key];
            m.erase(_key);
            deletenode(existingnode);
        }
        if(m.size()==cap)
        {
            m.erase(tail->prev->key);
            deletenode(tail->prev);
        }
        
        addnode(new node(_key,_value));
        m[_key]=head->next;
        

}
