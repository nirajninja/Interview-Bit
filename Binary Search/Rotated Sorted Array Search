int minNumber(vector<int>v,int low, int high)
    {
        int start=low,end=high;
        int pivot=-1;
        
        int n=high+1;
        if(v[0]<=v[n-1])
        {
            return 0;
        }
        
        while(start<=end)
        {
            
             if(v[start]<=v[end])
            {
                return start;
            }
            int mid=start+(end-start)/2;
            
            int prev=(mid+n-1)%n;
            int next=(mid+1)%n;
            
            if(v[mid]<=v[prev] && v[mid]<=v[next])
            {
                pivot=mid;
                break;
            }
             if(v[mid]>=v[start])
            {
                start=mid+1;
            }
            else if(v[mid]<=v[end]){
                end=mid-1;
            }
            
        }
        return pivot;
    }
int binarysearch(vector<int>v,int low,int high,int x)
{
    int start=low,end=high;
    
    while(start<=end)
    {
        int mid=start+(end-start)/2;
        if(v[mid]==x)
        {
            return mid;
        }
        else if(v[mid]>x)
        {
            end=mid-1;
        }
        else{
            start=mid+1;
        }
        
    }
    return -1;
}
int Solution::search(const vector<int> &A, int B) {
    
    int index=minNumber(A,0,A.size()-1);
    int ans1=-1,ans2=-1;
    int l1=0,e1=index-1;
    int l2=index,e2=A.size()-1;
    
    
    int firstindex=binarysearch(A,l1,e1,B);
    int secondindex=binarysearch(A,l2,e2,B);
    if(firstindex!=-1)
    {
        return firstindex;
    }
    else if(secondindex!=-1)
    {
        return secondindex;
    }
    return -1;
    
   

    
    
}
