int findPeakElement(vector<int> &arr)
{

    int n = arr.size();
    if (n == 1)
        return 0;
    int start = 0;
    int end = n - 1;
    while (start <= end)
    {
        int mid = start + (end - start) / 2;
        if (mid > 0 && mid < n - 1)
        {
            if (arr[mid] > arr[mid + 1] && arr[mid] > arr[mid - 1])
            {
                return mid;
            }
            else if (arr[mid] < arr[mid + 1])
            {
                start = mid + 1;
            }
            else if (arr[mid] < arr[mid - 1])
            {

                end = mid - 1;
            }
        }

        else if (mid == 0)
        {
            if (arr[mid] > arr[mid + 1])
            {
                return 0;
            }
            else
            {
                return 1;
            }
        }
        else if (mid == n - 1)
        {
            if (arr[mid] > arr[mid - 1])
            {
                return n - 1;
            }
            else
            {
                return n - 2;
            }
        }
    }

    return 0;
}

int asscendingbs(vector<int> v, int x, int low, int high)
{
    int start = low;
    int end = high;
    while (start <= end)
    {
        int mid = start + (end - start) / 2;
        if (v[mid] == x)
        {
            return mid;
        }
        else if (v[mid] > x)
        {
            end = mid - 1;
        }
        else
        {
            start = mid + 1;
        }
    }
    return -1;
}
int descendingbs(vector<int> v, int x, int low, int high)
{
    int start = low;
    int end = high;
    while (start <= end)
    {
        int mid = start + (end - start) / 2;
        if (v[mid] == x)
        {
            return mid;
        }
        else if (v[mid] > x)
        {
            start = mid + 1;
        }
        else
        {
            end = mid - 1;
        }
    }
    return -1;
}

int Solution::solve(vector<int> &A, int B)
{

    int peakindex = findPeakElement(A);

    int a = descendingbs(A, B, peakindex, A.size() - 1);
    int b = asscendingbs(A, B, 0, peakindex - 1);
    if (a != -1)
    {
        return a;
    }
    else if (b != -1)
    {
        return b;
    }
    return -1;
}
