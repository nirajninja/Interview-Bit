int Solution::maxProfit(const vector<int> &arr) {
    int n=arr.size();
    if(n==0) return 0;
    int lis=arr[0];
    int dp[n];
    int pro=0;
    memset(dp,0,sizeof(dp));
    for(int i=1;i<n;i++)
    {
        if(lis>arr[i])
        {
            lis=arr[i];
        }
        pro=arr[i]-lis;
        if(dp[i-1]<pro)
        {
            dp[i]=pro;
        }else{
            dp[i]=dp[i-1];
        }
    }
    
    int ma=arr[n-1];
    int dp2[n];
    int pr=0;
    memset(dp2,0,sizeof(dp2));
    for(int i=n-2;i>=0;i--)
    {
        if(ma<arr[i])
        {
            ma=arr[i];
        }
        pr=ma-arr[i];
        if(pr>dp2[i+1])
        {
            dp2[i]=pr;
        }
        else{
            dp2[i]=dp2[i+1];
        }
    }
    int op=0;
    for(int i=0;i<n;i++)
    {
        if(op<dp[i]+dp2[i])
        {
            op=dp[i]+dp2[i];
        }
    }
    return op;
}
