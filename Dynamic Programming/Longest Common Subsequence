---------------------------------
Recursive + memorization Code
---------------------------------
int dp[1006][1006];//={-1};
int lcs(string &A,int n, string &B, int m)
{
     if(n==0 || m==0)
     {
      return dp[n][m]=0;
     }
    if(dp[n][m]!=-1)
    {
        return  dp[n][m];
    }
    
    else if(A[n-1]==B[m-1])
    {
//        dp[n][m]=1+dp[n-1][m-1];
        return dp[n][m]=1+lcs(A,n-1,B,m-1);
    }
    
    else return dp[n][m]= max(lcs(A,n-1,B,m) ,lcs(A,n,B,m-1));

  //  return dp[n][m];
    
}
int Solution::solve(string A, string B) {
     memset(dp,-1,sizeof dp);
    int n=lcs(A,A.size(),B,B.size());
   
    return n;
    
}
--------------------------------------------
top down approach
----------------------------------------------

int Solution::solve(string A, string B) {
     
     //memset(dp,-1,sizeof dp);
     int m=A.size();
     int n=B.size();
     dp[n+1][m+1]={-1};
     // int n=lcs(A,A.size(),B,B.size());
   
   
   for(int i=0;i<A.size()+1;i++)
   {
       for(int j=0;j<B.size()+1;j++){
           if(i==0 || j==0)
           {
               dp[i][j]=0;
           }
        //   if(dp[i][j]!=-1)
        //   {
        //       dp[i][j]
        //   }
           else if(A[i-1]==B[j-1])
           {
               dp[i][j]=1+dp[i-1][j-1];
           }
           else{
               dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
           }
           
       }
       
       
   }
   
   
   
   
   
    return dp[m][n];
    
}
-------------------------------------------------------
dhanyawaad.
